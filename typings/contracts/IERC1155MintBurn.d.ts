/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IERC1155MintBurnInterface extends Interface {
  functions: {
    mint: TypedFunctionDescription<{
      encode([_to, _id, _amount, _data]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    batchMint: TypedFunctionDescription<{
      encode([_to, _ids, _amounts, _data]: [
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([_from, _id, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    batchBurn: TypedFunctionDescription<{
      encode([_from, _ids, _amounts]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;
  };

  events: {};
}

export class IERC1155MintBurn extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IERC1155MintBurn;
  attach(addressOrName: string): IERC1155MintBurn;
  deployed(): Promise<IERC1155MintBurn>;

  on(event: EventFilter | string, listener: Listener): IERC1155MintBurn;
  once(event: EventFilter | string, listener: Listener): IERC1155MintBurn;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IERC1155MintBurn;
  removeAllListeners(eventName: EventFilter | string): IERC1155MintBurn;
  removeListener(eventName: any, listener: Listener): IERC1155MintBurn;

  interface: IERC1155MintBurnInterface;

  functions: {
    mint(
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burn(
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    batchBurn(
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  mint(
    _to: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burn(
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  batchBurn(
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    mint(
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    burn(
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    batchBurn(
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ): Promise<BigNumber>;
  };
}
