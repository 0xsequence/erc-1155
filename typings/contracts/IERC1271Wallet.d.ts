/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IERC1271WalletInterface extends Interface {
  functions: {
    isValidSignature: TypedFunctionDescription<{
      encode([_hash, _signature]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class IERC1271Wallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IERC1271Wallet;
  attach(addressOrName: string): IERC1271Wallet;
  deployed(): Promise<IERC1271Wallet>;

  on(event: EventFilter | string, listener: Listener): IERC1271Wallet;
  once(event: EventFilter | string, listener: Listener): IERC1271Wallet;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IERC1271Wallet;
  removeAllListeners(eventName: EventFilter | string): IERC1271Wallet;
  removeListener(eventName: any, listener: Listener): IERC1271Wallet;

  interface: IERC1271WalletInterface;

  functions: {
    isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<string>;
  };

  isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<string>;

  filters: {};

  estimate: {
    isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<BigNumber>;
  };
}
