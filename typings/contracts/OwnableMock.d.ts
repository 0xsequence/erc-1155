/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OwnableMockInterface extends Interface {
  functions: {
    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    ownerCall: TypedFunctionDescription<{ encode([]: []): string }>;

    nonOwnerCall: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class OwnableMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OwnableMock;
  attach(addressOrName: string): OwnableMock;
  deployed(): Promise<OwnableMock>;

  on(event: EventFilter | string, listener: Listener): OwnableMock;
  once(event: EventFilter | string, listener: Listener): OwnableMock;
  addListener(eventName: EventFilter | string, listener: Listener): OwnableMock;
  removeAllListeners(eventName: EventFilter | string): OwnableMock;
  removeListener(eventName: any, listener: Listener): OwnableMock;

  interface: OwnableMockInterface;

  functions: {
    owner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ownerCall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    nonOwnerCall(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  owner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ownerCall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  nonOwnerCall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    owner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    ownerCall(): Promise<BigNumber>;

    nonOwnerCall(): Promise<BigNumber>;
  };
}
