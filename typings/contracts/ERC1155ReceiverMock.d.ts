/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ERC1155ReceiverMockInterface extends Interface {
  functions: {
    lastData: TypedFunctionDescription<{ encode([]: []): string }>;

    lastId: TypedFunctionDescription<{ encode([]: []): string }>;

    lastOperator: TypedFunctionDescription<{ encode([]: []): string }>;

    lastValue: TypedFunctionDescription<{ encode([]: []): string }>;

    shouldReject: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, _from, _id, , _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, , _data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    setShouldReject: TypedFunctionDescription<{
      encode([_value]: [boolean]): string;
    }>;
  };

  events: {
    TransferBatchReceiver: TypedEventDescription<{
      encodeTopics([_from, _to, _fromBalances, _toBalances]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    TransferSingleReceiver: TypedEventDescription<{
      encodeTopics([_from, _to, _fromBalance, _toBalance]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class ERC1155ReceiverMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ERC1155ReceiverMock;
  attach(addressOrName: string): ERC1155ReceiverMock;
  deployed(): Promise<ERC1155ReceiverMock>;

  on(event: EventFilter | string, listener: Listener): ERC1155ReceiverMock;
  once(event: EventFilter | string, listener: Listener): ERC1155ReceiverMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ERC1155ReceiverMock;
  removeAllListeners(eventName: EventFilter | string): ERC1155ReceiverMock;
  removeListener(eventName: any, listener: Listener): ERC1155ReceiverMock;

  interface: ERC1155ReceiverMockInterface;

  functions: {
    lastData(): Promise<string>;

    lastId(): Promise<BigNumber>;

    lastOperator(): Promise<string>;

    lastValue(): Promise<BigNumber>;

    shouldReject(): Promise<boolean>;

    onERC1155Received(
      arg0: string,
      _from: string,
      _id: BigNumberish,
      arg3: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      arg3: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    setShouldReject(
      _value: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  lastData(): Promise<string>;

  lastId(): Promise<BigNumber>;

  lastOperator(): Promise<string>;

  lastValue(): Promise<BigNumber>;

  shouldReject(): Promise<boolean>;

  onERC1155Received(
    arg0: string,
    _from: string,
    _id: BigNumberish,
    arg3: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    arg3: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  setShouldReject(
    _value: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    TransferBatchReceiver(
      _from: null,
      _to: null,
      _fromBalances: null,
      _toBalances: null
    ): EventFilter;

    TransferSingleReceiver(
      _from: null,
      _to: null,
      _fromBalance: null,
      _toBalance: null
    ): EventFilter;
  };

  estimate: {
    lastData(): Promise<BigNumber>;

    lastId(): Promise<BigNumber>;

    lastOperator(): Promise<BigNumber>;

    lastValue(): Promise<BigNumber>;

    shouldReject(): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      _from: string,
      _id: BigNumberish,
      arg3: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      arg3: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    setShouldReject(_value: boolean): Promise<BigNumber>;
  };
}
