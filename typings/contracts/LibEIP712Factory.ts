/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { LibEIP712 } from "./LibEIP712";

export class LibEIP712Factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<LibEIP712> {
    return super.deploy() as Promise<LibEIP712>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): LibEIP712 {
    return super.attach(address) as LibEIP712;
  }
  connect(signer: Signer): LibEIP712Factory {
    return super.connect(signer) as LibEIP712Factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibEIP712 {
    return new Contract(address, _abi, signerOrProvider) as LibEIP712;
  }
}

const _abi = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  }
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604080517f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749602080830191909152308284015282518083038401815260609092019092528051910120600055603e8060696000396000f3fe6080604052600080fdfea265627a7a723158204030f689bc0114e381d24ddb778bd66dcba26bd19b138bf22166eb1da8ba3e1864736f6c634300050d0032";
