import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ERC1155Metadata, ERC1155MetadataInterface } from "../../../tokens/ERC1155/ERC1155Metadata";
declare type ERC1155MetadataConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC1155Metadata__factory extends ContractFactory {
    constructor(...args: ERC1155MetadataConstructorParams);
    deploy(_name: PromiseOrValue<string>, _baseURI: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ERC1155Metadata>;
    getDeployTransaction(_name: PromiseOrValue<string>, _baseURI: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ERC1155Metadata;
    connect(signer: Signer): ERC1155Metadata__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b5060405162000ab238038062000ab283398101604081905262000034916200013e565b600162000042838262000238565b50600062000051828262000238565b5050506200035f565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b815167ffffffffffffffff80821115620000a057620000a06200005a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715620000e957620000e96200005a565b816040528381526020925086838588010111156200010657600080fd5b600091505b838210156200012a57858201830151818301840152908201906200010b565b600093810190920192909252949350505050565b600080604083850312156200015257600080fd5b825167ffffffffffffffff808211156200016b57600080fd5b620001798683870162000070565b935060208501519150808211156200019057600080fd5b506200019f8582860162000070565b9150509250929050565b600181811c90821680620001be57607f821691505b602082108103620001df57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023357600081815260208120601f850160051c810160208610156200020e5750805b601f850160051c820191505b818110156200022f578281556001016200021a565b5050505b505050565b815167ffffffffffffffff8111156200025557620002556200005a565b6200026d81620002668454620001a9565b84620001e5565b602080601f831160018114620002c357600084156200028c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556200022f565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156200031257888601518255948401946001909101908401620002f1565b50858210156200034f57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b610743806200036f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806306fdde03146100795780630e89341c1461008e5780636c0360eb146100a1575b600080fd5b61006461005f366004610377565b6100a9565b60405190151581526020015b60405180910390f35b610081610148565b60405161007091906103e4565b61008161009c366004610435565b6101d6565b61008161020a565b60007ff176cbe4000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016100fc57506001919050565b7f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600180546101559061044e565b80601f01602080910402602001604051908101604052809291908181526020018280546101819061044e565b80156101ce5780601f106101a3576101008083540402835291602001916101ce565b820191906000526020600020905b8154815290600101906020018083116101b157829003601f168201915b505050505081565b606060006101e383610217565b6040516020016101f49291906104bd565b6040516020818303038152906040529050919050565b600080546101559061044e565b60608160000361025a57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610284578061026e816105f9565b915061027d9050600a83610631565b915061025e565b60008167ffffffffffffffff81111561029f5761029f61066c565b6040519080825280601f01601f1916602001820160405280156102c9576020820181803683370190505b509050815b851561036e576102df60018261069b565b905060006102ee600a88610631565b6102f990600a6106ae565b610303908861069b565b61030e9060306106c5565b905060008160f81b90508084848151811061032b5761032b6106de565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610365600a89610631565b975050506102ce565b50949350505050565b60006020828403121561038957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103b957600080fd5b9392505050565b60005b838110156103db5781810151838201526020016103c3565b50506000910152565b60208152600082518060208401526104038160408501602087016103c0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561044757600080fd5b5035919050565b600181811c9082168061046257607f821691505b60208210810361049b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600081516104b38185602086016103c0565b9290920192915050565b600080845481600182811c9150808316806104d957607f831692505b60208084108203610511577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015610525576001811461055857610585565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0086168952841515850289019650610585565b60008b81526020902060005b8681101561057d5781548b820152908501908301610564565b505084890196505b5050505050506105c161059882866104a1565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361062a5761062a6105ca565b5060010190565b600082610667577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81810381811115610142576101426105ca565b8082028115828204841417610142576101426105ca565b60ff8181168382160190811115610142576101426105ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220574976883a38ac05f4726a0e0e1c4402fe6a72c391c7bf7eb37846fc680dad3564736f6c63430008120033";
    static readonly abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        stateMutability?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        anonymous?: undefined;
    })[];
    static createInterface(): ERC1155MetadataInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC1155Metadata;
}
export {};
